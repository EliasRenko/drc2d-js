// Generated by Haxe 4.2.2
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var Main = function() { };
Main.main = function() {
	console.log("src/Main.hx:9:","Hello JS!");
	var app = new core_App();
	app.init();
};
var comps_Control = function() {
};
var comps_Strip = function() {
	comps_Control.call(this);
};
comps_Strip.__super__ = comps_Control;
comps_Strip.prototype = $extend(comps_Control.prototype,{
	init: function() {
		this.__node_div = window.document.createElement("div");
		this.__node_div.classList.add("menustrip");
		this.addNode("File");
		this.addNode("Edit");
		this.addNode("View");
		this.addNode("Help");
		window.document.querySelector(".container").appendChild(this.__node_div);
	}
	,release: function() {
	}
	,addNode: function(text) {
		var __button = window.document.createElement("div");
		__button.classList.add("menustrip-button");
		__button.appendChild(window.document.createTextNode(text));
		this.__node_div.appendChild(__button);
	}
});
var core_Runtime = function() {
};
core_Runtime.prototype = {
	init: function() {
		var canvas = window.document.createElement("canvas");
		canvas.id = "canvas_gl";
		canvas.width = 640;
		canvas.height = 480;
		core_WebGL.gl = canvas.getContext("webgl");
		if(core_WebGL.gl != null) {
			console.log("src/core/Runtime.hx:42:","Context created");
		}
		this.__stage = new display_Stage();
		core_WebGL.gl.getExtension("OES_element_index_uint");
		var element = window.document.getElementById("canvas-container");
		if(element != null) {
			element.appendChild(canvas);
			canvas.width = element.offsetWidth;
			canvas.height = element.offsetHeight;
			return;
		}
		window.document.body.appendChild(canvas);
		window.requestAnimationFrame($bind(this,this.__onFrame));
	}
	,__onFrame: function(timestamp) {
		this.update();
		this.__stage.setToDraw();
		this.render();
		window.requestAnimationFrame($bind(this,this.__onFrame));
	}
	,render: function() {
	}
	,update: function() {
	}
	,get_active: function() {
		return this.__active;
	}
	,get_stage: function() {
		return this.__stage;
	}
};
var core_App = function() {
	core_Runtime.call(this);
	var strip = new comps_Strip();
	strip.init();
};
core_App.__super__ = core_Runtime;
core_App.prototype = $extend(core_Runtime.prototype,{
	render: function() {
	}
	,update: function() {
	}
});
var core_WebGL = function() { };
core_WebGL.versionString = function() {
	var ver = core_WebGL.gl.getParameter(7938);
	var slver = core_WebGL.gl.getParameter(35724);
	var ren = core_WebGL.gl.getParameter(7937);
	var ven = core_WebGL.gl.getParameter(7936);
	return "/ " + ver + " / " + slver + " / " + ren + " / " + ven + " /";
};
core_WebGL.activeTexture = function(texture) {
	core_WebGL.gl.activeTexture(texture);
};
core_WebGL.attachShader = function(program,shader) {
	core_WebGL.gl.attachShader(program,shader);
};
core_WebGL.bindAttribLocation = function(program,index,name) {
	core_WebGL.gl.bindAttribLocation(program,index,name);
};
core_WebGL.bindBuffer = function(target,buffer) {
	core_WebGL.gl.bindBuffer(target,buffer);
};
core_WebGL.bindFramebuffer = function(target,framebuffer) {
	core_WebGL.gl.bindFramebuffer(target,framebuffer);
};
core_WebGL.bindRenderbuffer = function(target,renderbuffer) {
	core_WebGL.gl.bindRenderbuffer(target,renderbuffer);
};
core_WebGL.bindTexture = function(target,texture) {
	core_WebGL.gl.bindTexture(target,texture);
};
core_WebGL.blendColor = function(red,green,blue,alpha) {
	core_WebGL.gl.blendColor(red,green,blue,alpha);
};
core_WebGL.blendEquation = function(mode) {
	core_WebGL.gl.blendEquation(mode);
};
core_WebGL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	core_WebGL.gl.blendEquationSeparate(modeRGB,modeAlpha);
};
core_WebGL.blendFunc = function(sfactor,dfactor) {
	core_WebGL.gl.blendFunc(sfactor,dfactor);
};
core_WebGL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	core_WebGL.gl.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
core_WebGL.bufferData = function(target,data,usage) {
	core_WebGL.gl.bufferData(target,data,usage);
};
core_WebGL.bufferSubData = function(target,offset,data) {
	core_WebGL.gl.bufferSubData(target,offset,data);
};
core_WebGL.checkFramebufferStatus = function(target) {
	return core_WebGL.gl.checkFramebufferStatus(target);
};
core_WebGL.clear = function(mask) {
	core_WebGL.gl.clear(mask);
};
core_WebGL.clearColor = function(red,green,blue,alpha) {
	core_WebGL.gl.clearColor(red,green,blue,alpha);
};
core_WebGL.clearDepth = function(depth) {
	core_WebGL.gl.clearDepth(depth);
};
core_WebGL.clearStencil = function(s) {
	core_WebGL.gl.clearStencil(s);
};
core_WebGL.colorMask = function(red,green,blue,alpha) {
	core_WebGL.gl.colorMask(red,green,blue,alpha);
};
core_WebGL.compileShader = function(shader) {
	core_WebGL.gl.compileShader(shader);
};
core_WebGL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	core_WebGL.gl.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
core_WebGL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	core_WebGL.gl.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
core_WebGL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	core_WebGL.gl.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
core_WebGL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	core_WebGL.gl.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
core_WebGL.createBuffer = function() {
	return core_WebGL.gl.createBuffer();
};
core_WebGL.createFramebuffer = function() {
	return core_WebGL.gl.createFramebuffer();
};
core_WebGL.createProgram = function() {
	return core_WebGL.gl.createProgram();
};
core_WebGL.createRenderbuffer = function() {
	return core_WebGL.gl.createRenderbuffer();
};
core_WebGL.createShader = function(type) {
	return core_WebGL.gl.createShader(type);
};
core_WebGL.createTexture = function() {
	return core_WebGL.gl.createTexture();
};
core_WebGL.cullFace = function(mode) {
	core_WebGL.gl.cullFace(mode);
};
core_WebGL.deleteBuffer = function(buffer) {
	core_WebGL.gl.deleteBuffer(buffer);
};
core_WebGL.deleteFramebuffer = function(framebuffer) {
	core_WebGL.gl.deleteFramebuffer(framebuffer);
};
core_WebGL.deleteProgram = function(program) {
	core_WebGL.gl.deleteProgram(program);
};
core_WebGL.deleteRenderbuffer = function(renderbuffer) {
	core_WebGL.gl.deleteRenderbuffer(renderbuffer);
};
core_WebGL.deleteShader = function(shader) {
	core_WebGL.gl.deleteShader(shader);
};
core_WebGL.deleteTexture = function(texture) {
	core_WebGL.gl.deleteTexture(texture);
};
core_WebGL.depthFunc = function(func) {
	core_WebGL.gl.depthFunc(func);
};
core_WebGL.depthMask = function(flag) {
	core_WebGL.gl.depthMask(flag);
};
core_WebGL.depthRange = function(zNear,zFar) {
	core_WebGL.gl.depthRange(zNear,zFar);
};
core_WebGL.detachShader = function(program,shader) {
	core_WebGL.gl.detachShader(program,shader);
};
core_WebGL.disable = function(cap) {
	core_WebGL.gl.disable(cap);
};
core_WebGL.disableVertexAttribArray = function(index) {
	core_WebGL.gl.disableVertexAttribArray(index);
};
core_WebGL.drawArrays = function(mode,first,count) {
	core_WebGL.gl.drawArrays(mode,first,count);
};
core_WebGL.drawElements = function(mode,count,type,offset) {
	core_WebGL.gl.drawElements(mode,count,type,offset);
};
core_WebGL.enable = function(cap) {
	core_WebGL.gl.enable(cap);
};
core_WebGL.enableVertexAttribArray = function(index) {
	core_WebGL.gl.enableVertexAttribArray(index);
};
core_WebGL.finish = function() {
	core_WebGL.gl.finish();
};
core_WebGL.flush = function() {
	core_WebGL.gl.flush();
};
core_WebGL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	core_WebGL.gl.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
core_WebGL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	core_WebGL.gl.framebufferTexture2D(target,attachment,textarget,texture,level);
};
core_WebGL.frontFace = function(mode) {
	core_WebGL.gl.frontFace(mode);
};
core_WebGL.generateMipmap = function(target) {
	core_WebGL.gl.generateMipmap(target);
};
core_WebGL.getActiveAttrib = function(program,index) {
	return core_WebGL.gl.getActiveAttrib(program,index);
};
core_WebGL.getActiveUniform = function(program,index) {
	return core_WebGL.gl.getActiveUniform(program,index);
};
core_WebGL.getAttachedShaders = function(program) {
	return core_WebGL.gl.getAttachedShaders(program);
};
core_WebGL.getAttribLocation = function(program,name) {
	return core_WebGL.gl.getAttribLocation(program,name);
};
core_WebGL.getBufferParameter = function(target,pname) {
	return core_WebGL.gl.getBufferParameter(target,pname);
};
core_WebGL.getContextAttributes = function() {
	return core_WebGL.gl.getContextAttributes();
};
core_WebGL.getError = function() {
	return core_WebGL.gl.getError();
};
core_WebGL.getExtension = function(name) {
	return core_WebGL.gl.getExtension(name);
};
core_WebGL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return core_WebGL.gl.getFramebufferAttachmentParameter(target,attachment,pname);
};
core_WebGL.getParameter = function(pname) {
	return core_WebGL.gl.getParameter(pname);
};
core_WebGL.getProgramInfoLog = function(program) {
	return core_WebGL.gl.getProgramInfoLog(program);
};
core_WebGL.getProgramParameter = function(program,pname) {
	return core_WebGL.gl.getProgramParameter(program,pname);
};
core_WebGL.getRenderbufferParameter = function(target,pname) {
	return core_WebGL.gl.getRenderbufferParameter(target,pname);
};
core_WebGL.getShaderInfoLog = function(shader) {
	return core_WebGL.gl.getShaderInfoLog(shader);
};
core_WebGL.getShaderParameter = function(shader,pname) {
	return core_WebGL.gl.getShaderParameter(shader,pname);
};
core_WebGL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return core_WebGL.gl.getShaderPrecisionFormat(shadertype,precisiontype);
};
core_WebGL.getShaderSource = function(shader) {
	return core_WebGL.gl.getShaderSource(shader);
};
core_WebGL.getSupportedExtensions = function() {
	return core_WebGL.gl.getSupportedExtensions();
};
core_WebGL.getTexParameter = function(target,pname) {
	return core_WebGL.gl.getTexParameter(target,pname);
};
core_WebGL.getUniform = function(program,location) {
	return core_WebGL.gl.getUniform(program,location);
};
core_WebGL.getUniformLocation = function(program,name) {
	return core_WebGL.gl.getUniformLocation(program,name);
};
core_WebGL.getVertexAttrib = function(index,pname) {
	return core_WebGL.gl.getVertexAttrib(index,pname);
};
core_WebGL.getVertexAttribOffset = function(index,pname) {
	return core_WebGL.gl.getVertexAttribOffset(index,pname);
};
core_WebGL.hint = function(target,mode) {
	core_WebGL.gl.hint(target,mode);
};
core_WebGL.isBuffer = function(buffer) {
	return core_WebGL.gl.isBuffer(buffer);
};
core_WebGL.isEnabled = function(cap) {
	return core_WebGL.gl.isEnabled(cap);
};
core_WebGL.isFramebuffer = function(framebuffer) {
	return core_WebGL.gl.isFramebuffer(framebuffer);
};
core_WebGL.isProgram = function(program) {
	return core_WebGL.gl.isProgram(program);
};
core_WebGL.isRenderbuffer = function(renderbuffer) {
	return core_WebGL.gl.isRenderbuffer(renderbuffer);
};
core_WebGL.isShader = function(shader) {
	return core_WebGL.gl.isShader(shader);
};
core_WebGL.isTexture = function(texture) {
	return core_WebGL.gl.isTexture(texture);
};
core_WebGL.lineWidth = function(width) {
	core_WebGL.gl.lineWidth(width);
};
core_WebGL.linkProgram = function(program) {
	core_WebGL.gl.linkProgram(program);
};
core_WebGL.pixelStorei = function(pname,param) {
	core_WebGL.gl.pixelStorei(pname,param);
};
core_WebGL.polygonOffset = function(factor,units) {
	core_WebGL.gl.polygonOffset(factor,units);
};
core_WebGL.readPixels = function(x,y,width,height,format,type,data) {
	core_WebGL.gl.readPixels(x,y,width,height,format,type,data);
};
core_WebGL.renderbufferStorage = function(target,internalformat,width,height) {
	core_WebGL.gl.renderbufferStorage(target,internalformat,width,height);
};
core_WebGL.sampleCoverage = function(value,invert) {
	core_WebGL.gl.sampleCoverage(value,invert);
};
core_WebGL.scissor = function(x,y,width,height) {
	core_WebGL.gl.scissor(x,y,width,height);
};
core_WebGL.shaderSource = function(shader,source) {
	core_WebGL.gl.shaderSource(shader,source);
};
core_WebGL.stencilFunc = function(func,ref,mask) {
	core_WebGL.gl.stencilFunc(func,ref,mask);
};
core_WebGL.stencilFuncSeparate = function(face,func,ref,mask) {
	core_WebGL.gl.stencilFuncSeparate(face,func,ref,mask);
};
core_WebGL.stencilMask = function(mask) {
	core_WebGL.gl.stencilMask(mask);
};
core_WebGL.stencilMaskSeparate = function(face,mask) {
	core_WebGL.gl.stencilMaskSeparate(face,mask);
};
core_WebGL.stencilOp = function(fail,zfail,zpass) {
	core_WebGL.gl.stencilOp(fail,zfail,zpass);
};
core_WebGL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	core_WebGL.gl.stencilOpSeparate(face,fail,zfail,zpass);
};
core_WebGL.texImage2D = function(target,level,internalformat,width,height,border,format,type,data) {
	core_WebGL.gl.texImage2D(target,level,internalformat,width,height,border,format,type,data);
};
core_WebGL.texParameterf = function(target,pname,param) {
	core_WebGL.gl.texParameterf(target,pname,param);
};
core_WebGL.texParameteri = function(target,pname,param) {
	core_WebGL.gl.texParameteri(target,pname,param);
};
core_WebGL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,data) {
	core_WebGL.gl.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,data);
};
core_WebGL.uniform1f = function(location,x) {
	core_WebGL.gl.uniform1f(location,x);
};
core_WebGL.uniform1fv = function(location,data) {
	core_WebGL.gl.uniform1fv(location,data);
};
core_WebGL.uniform1i = function(location,x) {
	core_WebGL.gl.uniform1i(location,x);
};
core_WebGL.uniform1iv = function(location,data) {
	core_WebGL.gl.uniform1iv(location,data);
};
core_WebGL.uniform2f = function(location,x,y) {
	core_WebGL.gl.uniform2f(location,x,y);
};
core_WebGL.uniform2fv = function(location,data) {
	core_WebGL.gl.uniform2fv(location,data);
};
core_WebGL.uniform2i = function(location,x,y) {
	core_WebGL.gl.uniform2i(location,x,y);
};
core_WebGL.uniform2iv = function(location,data) {
	core_WebGL.gl.uniform2iv(location,data);
};
core_WebGL.uniform3f = function(location,x,y,z) {
	core_WebGL.gl.uniform3f(location,x,y,z);
};
core_WebGL.uniform3fv = function(location,data) {
	core_WebGL.gl.uniform3fv(location,data);
};
core_WebGL.uniform3i = function(location,x,y,z) {
	core_WebGL.gl.uniform3i(location,x,y,z);
};
core_WebGL.uniform3iv = function(location,data) {
	core_WebGL.gl.uniform3iv(location,data);
};
core_WebGL.uniform4f = function(location,x,y,z,w) {
	core_WebGL.gl.uniform4f(location,x,y,z,w);
};
core_WebGL.uniform4fv = function(location,data) {
	core_WebGL.gl.uniform4fv(location,data);
};
core_WebGL.uniform4i = function(location,x,y,z,w) {
	core_WebGL.gl.uniform4i(location,x,y,z,w);
};
core_WebGL.uniform4iv = function(location,data) {
	core_WebGL.gl.uniform4iv(location,data);
};
core_WebGL.uniformMatrix2fv = function(location,transpose,data) {
	core_WebGL.gl.uniformMatrix2fv(location,transpose,data);
};
core_WebGL.uniformMatrix3fv = function(location,transpose,data) {
	core_WebGL.gl.uniformMatrix3fv(location,transpose,data);
};
core_WebGL.uniformMatrix4fv = function(location,transpose,data) {
	core_WebGL.gl.uniformMatrix4fv(location,transpose,data);
};
core_WebGL.useProgram = function(program) {
	core_WebGL.gl.useProgram(program);
};
core_WebGL.validateProgram = function(program) {
	core_WebGL.gl.validateProgram(program);
};
core_WebGL.vertexAttrib1f = function(indx,x) {
	core_WebGL.gl.vertexAttrib1f(indx,x);
};
core_WebGL.vertexAttrib1fv = function(indx,data) {
	core_WebGL.gl.vertexAttrib1fv(indx,data);
};
core_WebGL.vertexAttrib2f = function(indx,x,y) {
	core_WebGL.gl.vertexAttrib2f(indx,x,y);
};
core_WebGL.vertexAttrib2fv = function(indx,data) {
	core_WebGL.gl.vertexAttrib2fv(indx,data);
};
core_WebGL.vertexAttrib3f = function(indx,x,y,z) {
	core_WebGL.gl.vertexAttrib3f(indx,x,y,z);
};
core_WebGL.vertexAttrib3fv = function(indx,data) {
	core_WebGL.gl.vertexAttrib3fv(indx,data);
};
core_WebGL.vertexAttrib4f = function(indx,x,y,z,w) {
	core_WebGL.gl.vertexAttrib4f(indx,x,y,z,w);
};
core_WebGL.vertexAttrib4fv = function(indx,data) {
	core_WebGL.gl.vertexAttrib4fv(indx,data);
};
core_WebGL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	core_WebGL.gl.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
core_WebGL.viewport = function(x,y,width,height) {
	core_WebGL.gl.viewport(x,y,width,height);
};
core_WebGL.get_version = function() {
	return 7938;
};
var display_Stage = function() {
};
display_Stage.prototype = {
	setToDraw: function() {
		core_WebGL.gl.clearColor(0.266,0.141,0.203,1);
		core_WebGL.gl.clear(16384);
	}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
core_WebGL.DEPTH_BUFFER_BIT = 256;
core_WebGL.STENCIL_BUFFER_BIT = 1024;
core_WebGL.COLOR_BUFFER_BIT = 16384;
core_WebGL.POINTS = 0;
core_WebGL.LINES = 1;
core_WebGL.LINE_LOOP = 2;
core_WebGL.LINE_STRIP = 3;
core_WebGL.TRIANGLES = 4;
core_WebGL.TRIANGLE_STRIP = 5;
core_WebGL.TRIANGLE_FAN = 6;
core_WebGL.ZERO = 0;
core_WebGL.ONE = 1;
core_WebGL.SRC_COLOR = 768;
core_WebGL.ONE_MINUS_SRC_COLOR = 769;
core_WebGL.SRC_ALPHA = 770;
core_WebGL.ONE_MINUS_SRC_ALPHA = 771;
core_WebGL.DST_ALPHA = 772;
core_WebGL.ONE_MINUS_DST_ALPHA = 773;
core_WebGL.DST_COLOR = 774;
core_WebGL.ONE_MINUS_DST_COLOR = 775;
core_WebGL.SRC_ALPHA_SATURATE = 776;
core_WebGL.FUNC_ADD = 32774;
core_WebGL.BLEND_EQUATION = 32777;
core_WebGL.BLEND_EQUATION_RGB = 32777;
core_WebGL.BLEND_EQUATION_ALPHA = 34877;
core_WebGL.FUNC_SUBTRACT = 32778;
core_WebGL.FUNC_REVERSE_SUBTRACT = 32779;
core_WebGL.BLEND_DST_RGB = 32968;
core_WebGL.BLEND_SRC_RGB = 32969;
core_WebGL.BLEND_DST_ALPHA = 32970;
core_WebGL.BLEND_SRC_ALPHA = 32971;
core_WebGL.CONSTANT_COLOR = 32769;
core_WebGL.ONE_MINUS_CONSTANT_COLOR = 32770;
core_WebGL.CONSTANT_ALPHA = 32771;
core_WebGL.ONE_MINUS_CONSTANT_ALPHA = 32772;
core_WebGL.BLEND_COLOR = 32773;
core_WebGL.ARRAY_BUFFER = 34962;
core_WebGL.ELEMENT_ARRAY_BUFFER = 34963;
core_WebGL.ARRAY_BUFFER_BINDING = 34964;
core_WebGL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
core_WebGL.STREAM_DRAW = 35040;
core_WebGL.STATIC_DRAW = 35044;
core_WebGL.DYNAMIC_DRAW = 35048;
core_WebGL.BUFFER_SIZE = 34660;
core_WebGL.BUFFER_USAGE = 34661;
core_WebGL.CURRENT_VERTEX_ATTRIB = 34342;
core_WebGL.FRONT = 1028;
core_WebGL.BACK = 1029;
core_WebGL.FRONT_AND_BACK = 1032;
core_WebGL.CULL_FACE = 2884;
core_WebGL.BLEND = 3042;
core_WebGL.DITHER = 3024;
core_WebGL.STENCIL_TEST = 2960;
core_WebGL.DEPTH_TEST = 2929;
core_WebGL.SCISSOR_TEST = 3089;
core_WebGL.POLYGON_OFFSET_FILL = 32823;
core_WebGL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
core_WebGL.SAMPLE_COVERAGE = 32928;
core_WebGL.NO_ERROR = 0;
core_WebGL.INVALID_ENUM = 1280;
core_WebGL.INVALID_VALUE = 1281;
core_WebGL.INVALID_OPERATION = 1282;
core_WebGL.OUT_OF_MEMORY = 1285;
core_WebGL.CW = 2304;
core_WebGL.CCW = 2305;
core_WebGL.LINE_WIDTH = 2849;
core_WebGL.ALIASED_POINT_SIZE_RANGE = 33901;
core_WebGL.ALIASED_LINE_WIDTH_RANGE = 33902;
core_WebGL.CULL_FACE_MODE = 2885;
core_WebGL.FRONT_FACE = 2886;
core_WebGL.DEPTH_RANGE = 2928;
core_WebGL.DEPTH_WRITEMASK = 2930;
core_WebGL.DEPTH_CLEAR_VALUE = 2931;
core_WebGL.DEPTH_FUNC = 2932;
core_WebGL.STENCIL_CLEAR_VALUE = 2961;
core_WebGL.STENCIL_FUNC = 2962;
core_WebGL.STENCIL_FAIL = 2964;
core_WebGL.STENCIL_PASS_DEPTH_FAIL = 2965;
core_WebGL.STENCIL_PASS_DEPTH_PASS = 2966;
core_WebGL.STENCIL_REF = 2967;
core_WebGL.STENCIL_VALUE_MASK = 2963;
core_WebGL.STENCIL_WRITEMASK = 2968;
core_WebGL.STENCIL_BACK_FUNC = 34816;
core_WebGL.STENCIL_BACK_FAIL = 34817;
core_WebGL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
core_WebGL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
core_WebGL.STENCIL_BACK_REF = 36003;
core_WebGL.STENCIL_BACK_VALUE_MASK = 36004;
core_WebGL.STENCIL_BACK_WRITEMASK = 36005;
core_WebGL.VIEWPORT = 2978;
core_WebGL.SCISSOR_BOX = 3088;
core_WebGL.COLOR_CLEAR_VALUE = 3106;
core_WebGL.COLOR_WRITEMASK = 3107;
core_WebGL.UNPACK_ALIGNMENT = 3317;
core_WebGL.PACK_ALIGNMENT = 3333;
core_WebGL.MAX_TEXTURE_SIZE = 3379;
core_WebGL.MAX_VIEWPORT_DIMS = 3386;
core_WebGL.SUBPIXEL_BITS = 3408;
core_WebGL.RED_BITS = 3410;
core_WebGL.GREEN_BITS = 3411;
core_WebGL.BLUE_BITS = 3412;
core_WebGL.ALPHA_BITS = 3413;
core_WebGL.DEPTH_BITS = 3414;
core_WebGL.STENCIL_BITS = 3415;
core_WebGL.POLYGON_OFFSET_UNITS = 10752;
core_WebGL.POLYGON_OFFSET_FACTOR = 32824;
core_WebGL.TEXTURE_BINDING_2D = 32873;
core_WebGL.SAMPLE_BUFFERS = 32936;
core_WebGL.SAMPLES = 32937;
core_WebGL.SAMPLE_COVERAGE_VALUE = 32938;
core_WebGL.SAMPLE_COVERAGE_INVERT = 32939;
core_WebGL.COMPRESSED_TEXTURE_FORMATS = 34467;
core_WebGL.DONT_CARE = 4352;
core_WebGL.FASTEST = 4353;
core_WebGL.NICEST = 4354;
core_WebGL.GENERATE_MIPMAP_HINT = 33170;
core_WebGL.BYTE = 5120;
core_WebGL.UNSIGNED_BYTE = 5121;
core_WebGL.SHORT = 5122;
core_WebGL.UNSIGNED_SHORT = 5123;
core_WebGL.INT = 5124;
core_WebGL.UNSIGNED_INT = 5125;
core_WebGL.FLOAT = 5126;
core_WebGL.DEPTH_COMPONENT = 6402;
core_WebGL.ALPHA = 6406;
core_WebGL.RGB = 6407;
core_WebGL.RGBA = 6408;
core_WebGL.LUMINANCE = 6409;
core_WebGL.LUMINANCE_ALPHA = 6410;
core_WebGL.UNSIGNED_SHORT_4_4_4_4 = 32819;
core_WebGL.UNSIGNED_SHORT_5_5_5_1 = 32820;
core_WebGL.UNSIGNED_SHORT_5_6_5 = 33635;
core_WebGL.FRAGMENT_SHADER = 35632;
core_WebGL.VERTEX_SHADER = 35633;
core_WebGL.MAX_VERTEX_ATTRIBS = 34921;
core_WebGL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
core_WebGL.MAX_VARYING_VECTORS = 36348;
core_WebGL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
core_WebGL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
core_WebGL.MAX_TEXTURE_IMAGE_UNITS = 34930;
core_WebGL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
core_WebGL.SHADER_TYPE = 35663;
core_WebGL.DELETE_STATUS = 35712;
core_WebGL.LINK_STATUS = 35714;
core_WebGL.VALIDATE_STATUS = 35715;
core_WebGL.ATTACHED_SHADERS = 35717;
core_WebGL.ACTIVE_UNIFORMS = 35718;
core_WebGL.ACTIVE_ATTRIBUTES = 35721;
core_WebGL.SHADING_LANGUAGE_VERSION = 35724;
core_WebGL.CURRENT_PROGRAM = 35725;
core_WebGL.NEVER = 512;
core_WebGL.LESS = 513;
core_WebGL.EQUAL = 514;
core_WebGL.LEQUAL = 515;
core_WebGL.GREATER = 516;
core_WebGL.NOTEQUAL = 517;
core_WebGL.GEQUAL = 518;
core_WebGL.ALWAYS = 519;
core_WebGL.KEEP = 7680;
core_WebGL.REPLACE = 7681;
core_WebGL.INCR = 7682;
core_WebGL.DECR = 7683;
core_WebGL.INVERT = 5386;
core_WebGL.INCR_WRAP = 34055;
core_WebGL.DECR_WRAP = 34056;
core_WebGL.VENDOR = 7936;
core_WebGL.RENDERER = 7937;
core_WebGL.VERSION = 7938;
core_WebGL.NEAREST = 9728;
core_WebGL.LINEAR = 9729;
core_WebGL.NEAREST_MIPMAP_NEAREST = 9984;
core_WebGL.LINEAR_MIPMAP_NEAREST = 9985;
core_WebGL.NEAREST_MIPMAP_LINEAR = 9986;
core_WebGL.LINEAR_MIPMAP_LINEAR = 9987;
core_WebGL.TEXTURE_MAG_FILTER = 10240;
core_WebGL.TEXTURE_MIN_FILTER = 10241;
core_WebGL.TEXTURE_WRAP_S = 10242;
core_WebGL.TEXTURE_WRAP_T = 10243;
core_WebGL.TEXTURE_2D = 3553;
core_WebGL.TEXTURE = 5890;
core_WebGL.TEXTURE_CUBE_MAP = 34067;
core_WebGL.TEXTURE_BINDING_CUBE_MAP = 34068;
core_WebGL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
core_WebGL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
core_WebGL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
core_WebGL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
core_WebGL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
core_WebGL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
core_WebGL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
core_WebGL.TEXTURE0 = 33984;
core_WebGL.TEXTURE1 = 33985;
core_WebGL.TEXTURE2 = 33986;
core_WebGL.TEXTURE3 = 33987;
core_WebGL.TEXTURE4 = 33988;
core_WebGL.TEXTURE5 = 33989;
core_WebGL.TEXTURE6 = 33990;
core_WebGL.TEXTURE7 = 33991;
core_WebGL.TEXTURE8 = 33992;
core_WebGL.TEXTURE9 = 33993;
core_WebGL.TEXTURE10 = 33994;
core_WebGL.TEXTURE11 = 33995;
core_WebGL.TEXTURE12 = 33996;
core_WebGL.TEXTURE13 = 33997;
core_WebGL.TEXTURE14 = 33998;
core_WebGL.TEXTURE15 = 33999;
core_WebGL.TEXTURE16 = 34000;
core_WebGL.TEXTURE17 = 34001;
core_WebGL.TEXTURE18 = 34002;
core_WebGL.TEXTURE19 = 34003;
core_WebGL.TEXTURE20 = 34004;
core_WebGL.TEXTURE21 = 34005;
core_WebGL.TEXTURE22 = 34006;
core_WebGL.TEXTURE23 = 34007;
core_WebGL.TEXTURE24 = 34008;
core_WebGL.TEXTURE25 = 34009;
core_WebGL.TEXTURE26 = 34010;
core_WebGL.TEXTURE27 = 34011;
core_WebGL.TEXTURE28 = 34012;
core_WebGL.TEXTURE29 = 34013;
core_WebGL.TEXTURE30 = 34014;
core_WebGL.TEXTURE31 = 34015;
core_WebGL.ACTIVE_TEXTURE = 34016;
core_WebGL.REPEAT = 10497;
core_WebGL.CLAMP_TO_EDGE = 33071;
core_WebGL.MIRRORED_REPEAT = 33648;
core_WebGL.FLOAT_VEC2 = 35664;
core_WebGL.FLOAT_VEC3 = 35665;
core_WebGL.FLOAT_VEC4 = 35666;
core_WebGL.INT_VEC2 = 35667;
core_WebGL.INT_VEC3 = 35668;
core_WebGL.INT_VEC4 = 35669;
core_WebGL.BOOL = 35670;
core_WebGL.BOOL_VEC2 = 35671;
core_WebGL.BOOL_VEC3 = 35672;
core_WebGL.BOOL_VEC4 = 35673;
core_WebGL.FLOAT_MAT2 = 35674;
core_WebGL.FLOAT_MAT3 = 35675;
core_WebGL.FLOAT_MAT4 = 35676;
core_WebGL.SAMPLER_2D = 35678;
core_WebGL.SAMPLER_CUBE = 35680;
core_WebGL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
core_WebGL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
core_WebGL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
core_WebGL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
core_WebGL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
core_WebGL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
core_WebGL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
core_WebGL.VERTEX_PROGRAM_POINT_SIZE = 34370;
core_WebGL.POINT_SPRITE = 34913;
core_WebGL.COMPILE_STATUS = 35713;
core_WebGL.LOW_FLOAT = 36336;
core_WebGL.MEDIUM_FLOAT = 36337;
core_WebGL.HIGH_FLOAT = 36338;
core_WebGL.LOW_INT = 36339;
core_WebGL.MEDIUM_INT = 36340;
core_WebGL.HIGH_INT = 36341;
core_WebGL.FRAMEBUFFER = 36160;
core_WebGL.RENDERBUFFER = 36161;
core_WebGL.RGBA4 = 32854;
core_WebGL.RGB5_A1 = 32855;
core_WebGL.RGB565 = 36194;
core_WebGL.DEPTH_COMPONENT16 = 33189;
core_WebGL.STENCIL_INDEX = 6401;
core_WebGL.STENCIL_INDEX8 = 36168;
core_WebGL.DEPTH_STENCIL = 34041;
core_WebGL.RENDERBUFFER_WIDTH = 36162;
core_WebGL.RENDERBUFFER_HEIGHT = 36163;
core_WebGL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
core_WebGL.RENDERBUFFER_RED_SIZE = 36176;
core_WebGL.RENDERBUFFER_GREEN_SIZE = 36177;
core_WebGL.RENDERBUFFER_BLUE_SIZE = 36178;
core_WebGL.RENDERBUFFER_ALPHA_SIZE = 36179;
core_WebGL.RENDERBUFFER_DEPTH_SIZE = 36180;
core_WebGL.RENDERBUFFER_STENCIL_SIZE = 36181;
core_WebGL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
core_WebGL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
core_WebGL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
core_WebGL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
core_WebGL.COLOR_ATTACHMENT0 = 36064;
core_WebGL.DEPTH_ATTACHMENT = 36096;
core_WebGL.STENCIL_ATTACHMENT = 36128;
core_WebGL.DEPTH_STENCIL_ATTACHMENT = 33306;
core_WebGL.NONE = 0;
core_WebGL.FRAMEBUFFER_COMPLETE = 36053;
core_WebGL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
core_WebGL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
core_WebGL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
core_WebGL.FRAMEBUFFER_UNSUPPORTED = 36061;
core_WebGL.FRAMEBUFFER_BINDING = 36006;
core_WebGL.RENDERBUFFER_BINDING = 36007;
core_WebGL.MAX_RENDERBUFFER_SIZE = 34024;
core_WebGL.INVALID_FRAMEBUFFER_OPERATION = 1286;
core_WebGL.UNPACK_FLIP_Y_WEBGL = 37440;
core_WebGL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
core_WebGL.CONTEXT_LOST_WEBGL = 37442;
core_WebGL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
core_WebGL.BROWSER_DEFAULT_WEBGL = 37444;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
